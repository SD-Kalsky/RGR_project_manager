#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <stdio.h>
#include <bits/stdc++.h>
using namespace std;

class Observer
{
public:
    virtual void print_add_new()=0;
    virtual void print_menu()=0;
    virtual void print_list()=0;
    virtual void print_nod()=0;
    virtual void print_end()=0;
    virtual void print_wrong()=0;
};

class Observable
{
private:
   vector<Observer*> observers;
public:
   void addObserver(Observer *o){observers.push_back(o);}
   void print_ADD_NEW(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_add_new();}}
   void print_MENU(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_menu();}}
   void print_LIST(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_list();}}
   void print_NOD(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_nod();}}
   void print_END(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_end();}}
   void print_WRONG(){int size = observers.size();for (int i = 0; i < size; i++){observers[i]->print_wrong();}}
};

class Project
{
    private:
        string name, address;
    public:
    void setFNM(string s, string d)
    {
        name=s;
        address=d;
    }
    void setName(string s)
    {
        name=s;
    }
    void setAddress(string s)
    {
        address=s;
    }
    string getName()
    {
        return name;
    }
    string getAddress()
    {
        return address;
    }
    void save()
    {
      address=name+".pj";
      ofstream file(name+".pj");
      file.close();
    }
    friend istream & operator >> (istream & in,  Project & p)
    {
        cout<<"Add a name of a new project - ";
        in>>p.name;
        //cout<<"Add an address of the project - ";
        //in>> p.address;
        return in;
    }
    friend ostream & operator<< (ostream & stream,  Project & p)
    {
        stream <<p.name<<'-'<< p.address<<'+';
        return stream;
    }
};

class Project_List : public Observable
{ 
private:
   Project *list;
   int number;
   void init()
   {
      list=new Project[number]{};
      int i;
      for (i=0;i<number;i++) list[i].setFNM("Project","address");
   }
  void destroy ()
   {
      delete list;
      list = nullptr;
   }
public:
  Project_List()
    {
      number=1;
      init ();
    }
  Project_List(int i)
    {
      number=i;
      init ();
    }
  ~Project_List()
    {
      destroy ();
    }

string getName(int i)
  {
    return list[i].getName();
  }
string getAddress(int i)
  {
    return list[i].getAddress();
  }
int getNUM(){return number;}
void save()
  {
    int i;
    ofstream out;          
    out.open("projects.txt"); 
    if (out.is_open())
      {
        for (i=0; i<number;i++)
          {
            out<<list[i]<<'|';
            list[i].save();
          }
      }
    out.close();
  }
void load()
  {
    int i,c,l1,l2,l3;
    string line;          
    ifstream in("projects.txt"); 
    if (in.is_open())
    getline(in, line);
    in.close();
    c=0;
    for (i=0; i<size(line); i++)
      if(line[i]=='|') c++;
    Project *list_= new Project[c];
    c=0;
    l1=0;
    l2=line.find('-',l1)+1;
    l3=line.find('+',l2);
    for (i=0; i<size(line); i++)
      if(line[i]=='|')
        {
          list_[c].setFNM(line.substr(l1, l2-l1-1), line.substr(l2,l3-l2));
          l1=i+1;
          l2=line.find('-',l1)+1;
          l3=line.find('+',l2);
          c++;
        }
    delete[] list; 
    number=c;
    list=list_;    
  }
void add_NEW()
   {
   print_ADD_NEW();
   Project *list_= new Project[number+1];
   int i;
   Project p;
   for (i = 0; i<number; i++)
      {list_[i] = list[i];}
   cin>>p;
   list_[number]=p;
   number++;
   delete[] list;
   list=list_;
   save();
   }
void delete_PROJECT(int n)
    {
      string s;
      s=list[n-1].getAddress();
      char arr[s.length() + 1]; 
      strcpy(arr, s.c_str()); 
      if(remove(arr))
        cout<<"Error removing file"<<endl; 
      else 
      {
        Project *list_= new Project[number-1];
        int i,j;
        n--;
        for (i = 0; i<number; i++)
        {
          if (n!=i)
            { 
              j++; 
              list_[j] = list[i]; 
            }    
        }
        number--;
        delete[] list;
        list=list_;
        save();
      }     
   }
void start_deleting()
  {
      if (0!=number)
      {      
        print_NOD();
        int n;
        cin>>n;
        if (n>number)
         {
          cout<<"The entered number is not in the list"<<endl;
          start_deleting();
         }
        else if (n<0)
          {
            cout<<"The entered number is negative. Enter a natural number"<<endl;
            start_deleting();
          }
        else if (n!=0)
        {
          delete_PROJECT(n);
          cout<<"The project by number "<<n<<" is deleted"<<endl;
        }
      }
      else 
        cout<<"The list is empty"<<endl;
  }
   void program_END(){print_END();}
   void wrong_input(){print_WRONG();}

};

class View: public Observer
{
private:
   Project_List *model;
public:
   View(Project_List *m)
   {
      model = m;
      model->addObserver(this);
   }
   virtual void print_add_new(){cout<<"Add a new project"<<endl;}
   virtual void print_menu()
   {
      cout<<"Enter number"<<endl;
      cout<<"1 to print the list of projects"<<endl;
      cout<<"2 to add a new project"<<endl;
      cout<<"3 to delete project by the number"<<endl;
      cout<<"0 to end"<<endl;
   }
   virtual void print_list()
    {
      cout<<endl;
      if (model->getNUM()==0) cout<<"There is no projects";
      else 
        {
          for (int i{0};i<model->getNUM();i++)
            cout<<i+1<<". "<<(model->getName(i))<<endl;
          cout<<"***List is printed***";
        }
      cout<<endl;
    }
    virtual void print_nod(){cout<<"Enter a number of the project being deleting. Enter 0 to cancel the operation."<<endl;}
    virtual void print_end(){cout<<"***Program is ended***"<<endl;}
    virtual void print_wrong(){cout<<"***Wrong input***"<<endl;}
};

class Controller
{
private:
   Project_List *model;
public:
   Controller(Project_List *m)
   {
      model = m;
   }
   void start()
   {
      model->load();

      model->print_MENU();
      int i;
      cin>>i;
      switch (i)
      {
        case 1:
          model->print_LIST();
          start();
          break;
        case 2:
          model->add_NEW();
          start();
          break;
        case 3:
          model->start_deleting();
          start();
          break;
        case 0:
          model->program_END();
          break;
        default:
          model->wrong_input();
          start();
          break;
      }
   }
};
int main()
{
   Project_List model;
   View view(&model);
   Controller controller(&model);
   controller.start();
   return 0;
}
